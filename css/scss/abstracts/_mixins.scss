@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}

@mixin prefix($declarations, $prefixes: ()) {
    @each $property, $value in $declarations {
        @each $prefix in $prefixes {
            #{'-' + $prefix + '-' + $property}: $value;
        }
        #{$property}: $value;
    }
}
  

$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

// .site-header {
//     padding: 2rem;
//     font-size: 1.8rem;
//     @include mq('tablet-wide') {
//         padding-top: 4rem;
//         font-size: 2.4rem;
//     }
// }

@mixin font-face($font-name, $path, $weight: normal, $style: normal) {
    @font-face {
      font-family: quote($font-name);
      src: url($path+".eot");
      src: url($path+".eot?#iefix") format("embedded-opentype"), url($path+".woff")
          format("woff"), url($path+".ttf") format("truetype"), url($path+".svg##{$font-name}")
          format("svg");
      font-weight: $weight;
      font-style: $style;
    }
  }
  

 @mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
  }

//   div {
//     background-image: url("cute-doggo.png");
//     @include cover-background;
//   }